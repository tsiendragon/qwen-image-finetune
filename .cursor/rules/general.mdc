---
description: Project-wide conventions for this repo
alwaysApply: true
---
# project convention
## commit rules
Avery time when want to name a new version for the project. Do
1. Increase the version in @VERSION, depend on the changes to determine which version to increase, refer `Version Update` section
2. Add change log in @docs/changelog.md
3. Update todo list in @docs/todo.md
4. git commit the changes
5. In the README.md update the new updates and cite relevent docs
6. Push to remote
7. git create merge request

## Version Update
Version format: <major>.<minor>.<patch>
• MAJOR – any breaking change:
• CLI/config schema rename/removal; changed defaults that alter results
• Incompatible checkpoint/state_dict format (no auto-migrator)
• Incompatible data contract (columns/keys/shapes/labels)
• Default training/metric semantics change (same seed → different numbers)
• Removing a documented feature or supported API
• MINOR – backwards-compatible additions:
• New features/flags (default OFF), new callbacks/optimizers/schedulers
• New datasets/loaders adhering to existing interfaces
• User-visible perf wins without changing outputs
• PATCH – no API/format change:
• Bug fixes, small UX/logging/doc updates
• Internal refactors; dependency bumps that don’t break behavior
• Quick rules:
• “Will old scripts/checkpoints/data break or results change by default?” → MAJOR
• “Can users ignore it and everything stays the same?” + adds capability → MINOR
• Else → PATCH
• Pre-release tags: -alpha.N (experimental), -beta.N (feature-complete), -rc.N (bugfix-only)
• Guardrails:
•   Provide checkpoint/config migrators; if present and defaults unchanged, avoid MAJOR
•   CI must load N−1/N−2 checkpoints & configs unless a MAJOR release

## Other rules
1. do note create examples/ script or other script for example usage. Make the code/project concise and clean
2. Do not use relative import in code. For exmaple, do not use `from ..models.base_network import BaseNetwork`, but use `from src.models.base_network import BaseNetwork`
3. use english in docs
4. For existing codes, do not modify the code for lint/formatter improvement unless you are told to do so.
5. Use as less try-except. It is not friendly to debug
6. Do not create addition markdown documentation for explaning of the code unless you are told so
7. When creating bash script to run something, just keep the bash file as simple as enough