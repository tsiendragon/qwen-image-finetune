trainer: QwenImageEdit

model:
  # pretrained_model_name_or_path: "Qwen/Qwen-Image-Edit"
  pretrained_model_name_or_path: "ovedrive/qwen-image-edit-4bit"  # 4bit version
  quantize: False
  lora:
    r: 16  # LoRA rank, can be adjusted(8, 16, 32), larger r means more parameters
    lora_alpha: 16  # LoRA alpha, usually equal to r
    init_lora_weights: "gaussian"
    target_modules: ["to_k", "to_q", "to_v", "to_out.0"]
    pretrained_weight: null

data:
  class_path: "qflux.data.dataset.ImageDataset"
  init_args:
    dataset_path:
      - split: train
        repo_id: TsienDragon/face_segmentation_20
    caption_dropout_rate: 0.05  # reduce caption dropout, because the task is relatively specialized
    prompt_image_dropout_rate: 0.05
    cache_dir: ${cache.cache_dir}
    use_cache: ${cache.use_cache}
    cache_drop_rate: 0.1  # 10% probability of using empty prompt for training
    processor:
      class_path: "qflux.data.preprocess.ImageProcessor"
      init_args:
        process_type: center_crop
        target_size: [832, 576]
        controls_size: [[832, 576]]
  batch_size: 2  # adjust batch size according to the available memory, can be set to 1, 2, 4
  num_workers: 2
  shuffle: true

logging:
  output_dir: "/raid/lilong/data/experiment/qwen-edit-face_seg_lora_fp4-4090/"  # change the path to your own output path
  report_to: "tensorboard"
  tracker_project_name: "face_segmentation_lora"

optimizer:
  class_path: bitsandbytes.optim.Adam8bit  # 8bit Adam optimizer to save memory
  init_args:
    lr: 0.0001  # face segmentation task uses smaller learning rate
    betas: [0.9, 0.999]
  # if memory is sufficient, you can also use standard AdamW:
  # class_path: "torch.optim.AdamW"
  # init_args:
  #   lr: 0.0001
  #   weight_decay: 0.01
  #   betas: [0.9, 0.999]
  #   eps: 1e-8

lr_scheduler:
  scheduler_type: "cosine"  # cosine scheduler, better for fine-grained tasks
  warmup_steps: 50  # increase warmup steps
  num_cycles: 0.5
  power: 1.0

train:
  gradient_accumulation_steps: 1  # increase gradient accumulation to simulate larger batch size
  max_train_steps: 6000  # face segmentation data is small, reduce training steps
  num_epochs: 100  # increase epoch number
  checkpointing_steps: 100  # save checkpoints more frequently
  checkpoints_total_limit: 20
  max_grad_norm: 1.0
  mixed_precision: "bf16"
  gradient_checkpointing: True  # enable gradient checkpointing to save memory

cache:
  devices:
    vae: cuda:0
    text_encoder: cuda:1
  cache_dir: "/raid/lilong/data/experiment/qwen-edit-face_seg_lora_fp4_4090/cache"
  use_cache: true

predict:
  devices:
    vae: cuda:0
    text_encoder: cuda:0
    dit: cuda:0

# training resume setting
resume: null

# validation setting (optional)
validation:
  enabled: false  # if there is a validation set, enable it
  validation_steps: 200
  num_validation_samples: 4

# 22.17 GB used for traning with batchsize 2, speed 18.35s/it, on A100
